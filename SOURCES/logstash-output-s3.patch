--- lib/logstash/outputs/s3.rb	2015-07-21 01:47:28.000000000 +0300
+++ lib/logstash/outputs/s3.rb	2015-10-21 16:45:16.003442839 +0300
@@ -64,6 +64,8 @@
 
 # output {
 #    s3{ 
+#      temp_directory				(optional)
+#      s3_tempdir_owner                         (optional)
 #      access_key_id => "crazy_key"             (required)
 #      secret_access_key => "monkey_access_key" (required)
 #      endpoint_region => "eu-west-1"           (required)
@@ -104,13 +106,27 @@
 
 # LET'S ROCK AND ROLL ON THE CODE!
 
-class LogStash::Outputs::S3 < LogStash::Outputs::Base
+class LogStash::Outputs::S3X < LogStash::Outputs::Base
  #TODO integrate aws_config in the future 
  #  include LogStash::PluginMixins::AwsConfig
 
  config_name "s3"
  milestone 1
 
+ # The format to use when writing events to the file. This value
+ # supports any string and can include `%{name}` and other dynamic
+ # strings.
+ #
+ # If this setting is omitted, the full json representation of the
+ # event will be written as a single line.
+ config :message_format, :validate => :string
+
+ # s3_tempdir
+ config :temp_directory, :validate => :string, :default => "/var/lib/logstash/S3_temp/"
+
+ # s3_tempdir_owner
+ config :s3_tempdir_owner, :validate => :string, :default => "logstash"
+
  # Aws access_key.
  config :access_key_id, :validate => :string
  
@@ -120,6 +136,9 @@
  # S3 bucket
  config :bucket, :validate => :string
 
+ # S3 bucket + "/year/month/day/"
+ #config :bucket_ymd, :validate => :string, :default => nil
+
  # Aws endpoint_region
  config :endpoint_region, :validate => ["us-east-1", "us-west-1", "us-west-2",
                                         "eu-west-1", "ap-southeast-1", "ap-southeast-2",
@@ -152,11 +171,28 @@
  # Method to set up the aws configuration and establish connection
  def aws_s3_config
 
+=begin
+  _current_year = "#{Time.new.year}"
+  _current_month = "#{Time.new.month}"
+  _current_day = "#{Time.new.day}"
+  _ymd = "#{_current_year}/#{_current_month}/#{_current_day}"
+
+# @bucket = @bucket+'/'+'#{_ymd}'
+
+# @bucket_ymd = @bucket+"#{_ymd}" if @bucket =~ /^(\w\/){,0}/
+
+  if @bucket =~ /^(\w\/){,0}/
+    @bucket_ymd = @bucket + "#{_current_year}" + "/" + "#{_current_month}" + "/" + "#{_current_day}"
+  end
+=end
+
   @endpoint_region == 'us-east-1' ? @endpoint_region = 's3.amazonaws.com' : @endpoint_region = 's3-'+@endpoint_region+'.amazonaws.com'
 
   @logger.info("Registering s3 output", :bucket => @bucket, :endpoint_region => @endpoint_region)
 
   AWS.config(
+    :s3_tempdir_owner => @s3_tempdir_owner,
+    :temp_directory => @temp_directory,
     :access_key_id => @access_key_id,
     :secret_access_key => @secret_access_key,
     :s3_endpoint => @endpoint_region
@@ -179,18 +215,25 @@
 
  end
 
- # this method is used for write files on bucket. It accept the file and the name of file.
- def write_on_bucket (file_data, file_basename)
- 
+ def write_on_bucket_without_retry(file_data, file_basename)
   # if you lose connection with s3, bad control implementation.
   if ( @s3 == nil) 
     aws_s3_config
   end
 
   # find and use the bucket
-  bucket = @s3.buckets[@bucket]
+  
+  event = LogStash::Event.new({"year" => Time.now.year, "month" => Time.now.month, "day" => Time.now.day})
+
+  bucket_path = event.sprintf(@bucket)
+
+  @logger.warn "S3: ready to write "+file_basename+" in bucket path "+bucket_path+", Fire in the hole!"
+
+   bucket = @s3.buckets[bucket_path]
+  @logger.warn "S3: ready to write "+file_basename+" in bucket "+bucket_path+", Fire in the hole!"
 
-  @logger.debug "S3: ready to write "+file_basename+" in bucket "+@bucket+", Fire in the hole!"
+
+# @logger.debug "S3: ready to write "+file_basename+" in bucket "+@bucket_ymd+", File in the hole!"
 
   # prepare for write the file
   object = bucket.objects[file_basename]
@@ -199,6 +242,20 @@
   @logger.debug "S3: has written "+file_basename+" in bucket "+@bucket + " with canned ACL \"" + @canned_acl + "\""
 
  end
+
+ # this method is used for write files on bucket. It accept the file and the name of file.
+ def write_on_bucket (file_data, file_basename)
+ 
+     begin
+         self.write_on_bucket_without_retry(file_data, file_basename)
+     rescue => ex; ex.message
+         # retry once on any exception
+         @logger.warn("Retry to upload file " + file_basename)
+         sleep(3)
+         self.write_on_bucket_without_retry(file_data, file_basename)
+     end
+ end
+ 
   
  # this method is used for create new path for name the file
  def getFinalPath
@@ -223,13 +280,20 @@
        write_on_bucket(file, name_file)
 
        if (flag == true)
-          @logger.debug "S3: file: "+name_file+" restored on bucket "+@bucket
+         @logger.debug "S3: file: "+name_file+" restored on bucket "+@bucket
+#        @logger.debug "S3: file: "+name_file+" restored on bucket "+@bucket_ymd
        else
-          @logger.debug "S3: file: "+name_file+" was put on bucket "+@bucket
+         @logger.debug "S3: file: "+name_file+" was put on bucket "+@bucket
+#        @logger.debug "S3: file: "+name_file+" was put on bucket "+@bucket_ymd
        end
      end
 
-     File.delete (file)
+    begin
+         File.delete (file)
+    rescue => ex
+      ex.message; ex.backtrace
+         @logger.warn("Can't delete file " + file)
+    end
 
    end
  end
@@ -253,8 +317,15 @@
  public
  def register
    require "aws-sdk"
-   @temp_directory = "/opt/logstash/S3_temp/"
-
+=begin
+   require "fileutils"
+    if @temp_directory.empty?
+     @temp_directory = "/var/lib/logstash/S3_temp/"
+    end
+    if @s3_tempdir_owner.empty?
+     @s3_tempdir_owner = "logstash"
+    end
+=end
    if (@tags.size != 0)
        @tag_path = ""
        for i in (0..@tags.size-1)
@@ -263,10 +334,15 @@
    end
 
    if !(File.directory? @temp_directory)
-    @logger.debug "S3: Directory "+@temp_directory+" doesn't exist, let's make it!"
-    Dir.mkdir(@temp_directory)
+    @logger.info "S3: Directory "+@temp_directory+" doesn't exist, let's make it!"
+     unless Process.euid == 0
+       unless Dir.exists?("#{@temp_directory}")
+	Dir.mkdir(@temp_directory)
+#	FileUtils.chown("#{@s3_tempdir_owner}", "#{@s3_tempdir_owner}", "#{@temp_directory}")
+       end
+     end
    else
-    @logger.debug "S3: Directory "+@temp_directory+" exist, nothing to do"
+    @logger.info "S3: Directory "+@temp_directory+" exist, nothing to do"
    end 
    
    if (@restore == true )
@@ -302,7 +378,11 @@
   elsif (@format == "json")
      message = event.to_json
   else
-     message = event.to_s
+    if @message_format
+      message = event.sprintf(@message_format)
+    else
+      message = event.to_s
+    end
   end
   
   if(time_file !=0)
@@ -320,7 +400,7 @@
        # Put the event in the file, now! 
        File.open(@tempFile, 'a') do |file|
          file.puts message
-         file.write "\n"
+         #file.write "\n"
        end
 
      else
@@ -338,7 +418,7 @@
     @logger.debug "S3: put event into "+File.basename(@tempFile)
     File.open(@tempFile, 'a') do |file|
       file.puts message
-      file.write "\n"
+      #file.write "\n"
     end
   end
     
@@ -353,5 +433,3 @@
  end
 
 end
-
-# Enjoy it, by Bistic:)
